package Language

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _language_en_us_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xd1\x6a\xe3\x46\x14\x86\xef\x05\x7a\x87\x83\x8c\x68\x03\x89\xdc\x40\x7a\x51\x51\x02\x71\xea\x36\xa5\x4d\x1b\x12\x97\x10\x92\x40\xc6\xa3\x23\x69\xf0\xf8\x1c\x75\xe6\xa8\x8e\x1a\xf2\x06\xfb\x48\xfb\x4e\xfb\x0a\xcb\x48\xf6\xda\xc9\x12\x76\x61\x7d\x63\xd0\xcc\xfc\xf3\x9d\xef\x9f\xd1\xac\x36\x1e\xac\xa2\xaa\x55\x15\x42\x69\x2c\x82\xf1\xd0\x38\xfe\xcf\x14\x58\xc0\xbc\x83\x9b\x9b\x19\xfc\x5c\x8b\x34\x3e\x1f\x8f\x57\xab\x55\xd6\x75\x92\x69\x66\x3b\x3e\x8e\xa3\x73\x65\x68\xea\x1c\xbb\x99\x69\x7c\x0e\xc9\x85\x43\xef\x41\x51\x07\x0b\xec\x40\x18\xf0\xd1\x48\x96\x65\x49\x1c\xfd\x43\x6a\x6e\xf1\xa4\x69\x6c\x77\x85\xde\x1b\xa6\x1c\x92\xe1\x63\xd8\xa8\xc2\x02\x94\xec\x40\x01\xe1\x0a\xd6\x7b\xc2\xd2\xb9\x71\xca\xec\x43\x63\x51\x79\x04\x5d\xa3\x5e\x80\xd4\x08\x57\x28\x62\xa8\xf2\x49\x1c\x9d\x32\x95\xa6\xfa\xd5\x58\x9c\x3e\x6a\x6c\x64\x48\xef\xc9\xc0\x10\xe8\x7e\xb9\x2d\x55\x58\x08\xdb\x15\x11\xcb\x29\x13\xa1\x96\x3e\xfe\x05\x8b\x35\xb4\xf8\x74\x31\x68\x76\x0e\xb5\xd8\xee\x15\xc2\xce\xf5\x97\x2d\xfd\xfd\x47\x0e\xc9\x25\xcf\x59\xe0\x1a\xe7\x67\xcc\x0b\x70\xb8\x46\x01\xec\xa3\x8b\x0f\xef\xdf\xb9\x96\xc8\x50\x05\x4c\xd0\xb0\x13\x78\x4a\x7f\x78\x4e\xe2\xe8\xaf\xb6\xa8\x30\x87\xa4\xff\x4f\xe2\x28\x8e\x46\x3b\x6a\xb4\x0e\x56\x37\x1d\xfc\x5f\x67\x4b\xc6\xca\x38\x9b\xb1\xab\x32\x4d\x5b\x2e\x26\x51\x5a\x7a\x39\xaa\x58\x1a\x32\x5e\x9c\x12\x76\x71\x74\x6d\x16\xe6\x4f\x43\x8b\x5e\xc9\x4b\xf1\x7d\x7a\xe0\xf8\x72\x0e\xf4\x68\x67\x68\x9b\x19\x3e\x4a\xe8\x7b\x38\x50\x71\x48\xda\x00\x56\x46\xea\x76\x9e\x69\x5e\x8e\xa9\x53\xa4\x95\x14\x6a\x7c\x8e\x85\x51\x81\xe2\x60\xc2\x32\x4a\xa7\x3f\xa6\x3f\x1d\xa6\x93\x5f\xd2\xe9\x51\x3a\x99\xa4\x27\x47\x7d\xf5\x86\xbc\xb8\x56\x07\x67\x7e\xb0\x70\xaa\xe8\x3b\x81\xd2\x50\x01\xb7\xe1\xb1\x35\xaa\xc2\xfb\x50\xe9\xed\x9b\x3a\xee\x3f\x7b\x2a\x6a\x18\xc5\x50\xd3\x4a\x78\xde\xeb\x46\xe3\xe8\x37\x94\x80\xf4\x3b\x95\xbc\x11\xb3\x7b\xe1\x53\x7a\xf8\x3c\x5c\x16\xf4\x7c\x75\xee\x40\x3e\xab\x11\x02\x2d\x68\x6e\x6d\x01\xc4\x02\x73\x84\x92\x5b\x2a\xf6\x61\xde\x0e\x47\x4b\xb6\x96\x57\xe1\x41\x38\xf4\xad\x15\x0f\x2b\x74\xeb\x5d\x71\x34\xda\x8e\x1c\x47\xa3\xb5\xeb\xd6\x23\x24\xcb\x2a\xbf\x08\xd9\x62\xc4\x62\x12\xe4\xff\xdb\xa2\xeb\x40\x55\xca\xd0\xd0\x76\x18\xea\x0a\x95\xd3\x75\x0e\xc9\x37\xc3\xdc\x51\x50\xb0\x83\xf0\x10\xe4\xec\x40\x3c\xbc\x82\x18\x24\xbc\x59\xd2\x78\x33\x59\x1c\x8d\xbe\x77\x58\x98\x20\xae\x1f\x37\x44\xde\x1f\x1c\x6f\x47\xdf\x8b\xa3\x51\xd6\xff\xb6\x83\x5d\xae\x4f\xe4\x90\xdc\xd1\xf6\x7c\x5f\xd3\xc1\xf1\x50\xdc\xde\x5d\x80\xf8\x18\x00\x00\xff\xff\x4c\xdc\xca\xe2\xe2\x04\x00\x00")

func language_en_us_yml() ([]byte, error) {
	return bindata_read(
		_language_en_us_yml,
		"language/en-US.yml",
	)
}

var _language_ja_jp_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x5f\x4b\x23\x57\x18\xc6\xef\x07\xe6\x3b\x0c\x13\x06\xba\x17\x4e\xba\xb0\xbd\x68\x2e\x16\x36\xdb\xb4\x5b\x5a\x77\xcb\xee\x96\xbd\x50\x2f\xc6\xe4\x98\x0c\xc6\x33\x61\x32\x82\x56\x84\xbc\x73\xc6\x34\x98\x29\xb1\xd2\x28\x55\xab\x0d\xfe\x89\x4d\x9a\x28\x88\x10\x6b\x8a\x1f\xe6\xcd\x24\xe9\x55\xbe\x42\x39\x27\xa6\xf6\x4f\xda\x42\xed\xe6\x22\x0c\x9c\x73\xde\xe7\x79\x7f\xef\x73\xce\xa4\x61\xd2\x98\x6d\x5b\xf6\x6b\x33\x93\x8d\x28\x2a\x82\x87\xb0\x83\xae\x8f\xd0\x44\xb7\x81\xac\x8d\xee\x66\x77\xbd\x8d\xf0\x2d\xc2\x69\xb7\x70\x8d\x6e\x51\xd7\x75\x5d\x95\xa5\xcf\xa9\x31\x9b\x26\x4f\x32\x99\xf4\xf2\x2b\x92\xcd\x9a\x16\x8d\x28\xea\xa4\x69\x1b\x26\x42\xbd\xbb\x75\x8e\xb0\x8d\xe0\xdd\x2e\xf5\xbe\xb9\xe8\xd7\x8b\x08\x55\x84\xaf\x10\x6a\x08\xde\xa0\xed\xf7\x4f\x1b\x41\x73\x07\xdd\x4d\x64\x80\x6e\x15\x19\x43\xf7\x4c\x1c\x3b\x41\x28\x21\x7c\x8f\x50\x46\xf0\x54\x59\x7a\x6a\xd1\x39\x33\xf9\xa1\x99\x26\xb1\xa5\x38\xc9\x38\x43\xb1\xdb\xf3\xac\x8c\x6e\x05\xdd\x23\x64\xf5\x5e\xf9\x3c\x68\xb5\xf8\x01\x83\x52\xcb\x79\x6a\x51\x4a\xe2\x8e\x30\xf5\x7b\x73\x8d\x43\xa1\x52\x42\x56\x43\x76\x21\x44\xff\xa3\xb1\x97\x8b\xf4\xc5\x27\x9c\x1b\x6b\x20\xdb\xe3\x1b\x59\xe1\x0d\x99\x7d\x66\x59\xf3\x08\xcd\xa0\xb4\xdd\xb9\xa9\x20\xf8\x2f\x9e\x23\xd4\x45\xf9\x43\x51\xc3\x43\xb7\x38\x68\xfb\x2b\xda\xbb\xab\xc8\xbe\xe3\x94\x59\x01\xa1\x1a\x34\x0f\xfa\x15\xbf\xd3\x6a\xa8\xb2\xf4\x7c\x31\x91\x24\xa2\xf2\x3a\xb2\x2f\x87\xff\xaa\x2c\xc9\x52\x28\xe5\x38\x99\x6c\x24\x1c\xfe\x22\xa5\x2f\x58\x24\x69\xda\x69\xdd\xb2\x93\x7a\x9c\x22\xd4\xfb\xa7\xb5\xa0\x5c\xfa\x53\x3b\xbd\x66\xa5\xb7\x91\xef\xe7\xd6\x10\xea\xbf\xe4\x0e\x7b\x97\x95\xbf\xf6\x22\x4b\x6f\xcc\x79\xf3\x53\x93\xce\x8b\x38\x44\x14\x55\x98\xbb\x47\x45\x61\xf6\x19\x49\x67\x5e\x93\x25\x27\xa2\xa8\x9d\x9f\x6f\x10\xbc\xee\xd6\x15\xc2\x99\x32\xea\x21\x69\x3a\xa9\xc5\x59\x3d\x6e\x2d\x84\xe9\xb2\x41\xe3\x86\x93\x30\xc2\x93\x24\x61\x1a\xdc\xce\x44\xd4\x72\x42\x5a\xec\x3d\xed\xfd\x87\x5a\xf4\x03\x2d\xf6\x48\x8b\x46\xb5\x27\x8f\x14\x84\x6a\xbf\x76\x83\x70\x35\x4e\x32\x34\xf5\xb7\x80\x66\xc4\x14\xce\xa6\x78\xea\x33\x46\x92\xcc\x20\xf8\xfd\x93\x22\xc2\x11\xc2\xd7\xa2\xb9\xa2\x98\xd0\xc1\xa0\xed\x07\x6b\xc7\xc1\xfa\x2e\x82\x3f\x4a\x8b\x27\x56\x7f\x40\xc8\xf3\x8f\x7f\x0c\x86\x2c\x7d\x44\x1c\xde\xc0\xc7\x74\xce\x1a\xf1\x9c\xe2\x40\x47\x0e\x56\xb4\x87\xab\x6f\x4b\x7d\x48\x01\xd9\x8e\xb8\xbd\x2d\x74\x37\xc7\xaa\x20\xf8\x83\xb6\xdf\xb9\x3e\xee\xb4\x8a\x08\xcd\xde\xe5\x46\x77\x7f\xef\x8f\x9b\x0f\x38\xcd\xdf\x60\xc9\x52\x48\x59\x48\x46\xee\x0a\xb3\xbc\x48\xee\x3e\x9f\x07\xba\x2e\x42\xbe\xd3\xca\x05\x3f\x9d\x88\xbc\x78\xc1\x46\x01\xdd\x12\xc2\xee\xd8\xa4\x71\x32\xaf\x88\x61\xc7\x53\x22\xe3\xff\x83\xd7\x69\xca\x01\x2b\x9c\xec\xbd\x3d\xfe\xcb\x45\x0b\x8f\x98\xc8\x52\xe8\x1d\xf1\x88\xe4\xc4\xfb\xf3\x23\x9f\x07\x2b\x08\x64\x9f\x71\x64\x13\x8f\xef\xf0\x3d\x90\xa5\x90\x2e\x7e\x77\x04\x5e\x92\x84\x69\x93\x38\xbf\x1e\xd3\x74\x5c\x25\x91\x99\x89\xc7\xc3\xbc\x3c\x98\xa6\xaa\x2c\xfd\x1a\x00\x00\xff\xff\x5a\x9e\xef\x1f\xb3\x05\x00\x00")

func language_ja_jp_yml() ([]byte, error) {
	return bindata_read(
		_language_ja_jp_yml,
		"language/ja-JP.yml",
	)
}

var _language_zh_cn_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xdf\x4b\xdb\x5c\x18\xc7\xef\x03\xf9\x1f\x4a\x4b\xe0\xf5\xc2\xf4\x15\x7c\x2f\xde\x5e\x08\xd6\x75\x73\x6c\x6e\x43\x1d\x5e\xa8\x17\xb1\x3d\xa6\x07\xeb\x49\x48\x23\xe8\x44\xe8\x86\xda\x16\xdb\x5a\x69\xa7\x9d\x74\xd3\x2a\x15\x61\x98\x14\xbb\xd9\xd2\x5f\xfe\x33\x39\x27\xc9\x95\xff\xc2\x38\x89\xda\x09\xca\x58\x2e\x4f\x9e\xe7\xf9\x3c\x9f\xf3\x3d\x13\x02\x44\x21\x45\x91\x94\x69\x28\xc7\x03\x1e\x2f\xc9\xa4\x8d\x76\x9b\x6c\xee\xda\x45\xcd\x4e\x24\x70\xb2\xc5\xf3\x3c\xef\x65\x99\xf7\x48\x58\x88\x81\x51\x59\x8e\xad\x4d\x81\x78\x1c\x4a\x88\x56\x1f\x1c\x93\xfa\x67\x9c\xdf\x9b\x80\x8a\x00\xcd\x62\xdd\xd2\x1b\x64\xbf\x66\x1e\x6e\xde\xd6\xdc\x74\x32\xf4\xe8\x34\x41\x8e\xaa\x96\xd6\x33\xbb\x9a\x97\x65\xc6\x24\xb4\x08\xc5\xe7\x30\x06\x42\xab\x61\x20\xab\xee\x2c\x7b\x2b\x6b\x76\x35\xb2\x9f\x34\xda\x57\xb8\xf3\x09\x37\x9b\xb4\x54\x40\x48\x52\xc7\x24\x84\x40\x58\x75\x20\xf7\x54\x72\x71\x6a\x56\x34\xbb\xd0\x23\xb9\xaa\x95\xac\x3b\x3f\x1f\xc5\x4d\xae\xa0\xb7\xaf\x68\x5b\xb9\x85\xbf\x9c\x1b\xad\xd6\x0c\x58\x18\x97\xa4\x25\x92\xab\x92\xe2\x15\x6e\x5c\xe2\x4e\x02\xe7\x75\xda\x7b\x9d\xb7\x2a\x19\xa3\x95\x5b\xe7\xfe\xdd\x30\xbf\xeb\x78\xf7\xd4\xcb\x32\x6f\x56\x22\x22\xa0\xfd\xa9\xba\xd1\x4c\x90\x54\xdd\xcb\x32\x2c\xe3\x73\xb7\xb0\xb4\x6b\xfb\x40\x8b\xaa\xaa\x1c\x0f\xf8\xfd\x1f\xa2\xfc\xb2\x04\x44\xa8\xc4\x78\x49\x11\xf9\xf0\xad\xbf\xf5\xb1\x68\xd6\xdb\xa6\x56\x31\xf3\xdb\x78\xaf\xc4\x32\x33\x70\x09\xbe\x86\x68\xc9\xb9\xf9\x7b\x23\x77\x16\x65\x3f\xda\xe6\x60\xc7\x41\x4c\x9e\x06\xab\x6a\xc0\xe3\x35\xba\xd7\x66\xf1\xdc\xd2\x7f\x90\x52\xce\xd2\x1b\x38\x9d\xc5\xbd\x84\xe7\x6e\x15\x11\xaa\xd1\x95\x05\x3e\x2c\x2d\xfb\xd1\x9a\x80\xc2\x82\x1a\x11\xfc\x13\x20\x02\x05\x0a\x1f\x0c\x4a\xaa\x8f\x0b\xfd\xc7\xfd\x3f\xc4\x05\x9f\x71\xa1\x61\x2e\x18\xe4\x46\x87\x3d\xe4\xa8\x6a\x96\x77\x5c\x41\x5c\x3e\x9f\x7d\x52\x6c\xde\x68\x5e\x90\x74\xcf\x68\x66\x71\xaa\x36\x4b\x5f\x91\x2c\x88\x60\x1e\x17\xce\x1e\x64\xd0\x2b\xe0\xad\x2a\x29\xe9\x38\x7f\xe6\xe6\xc5\x32\x2f\x80\x4a\x37\x78\x89\x16\xa5\x3b\x7d\x4a\xa2\xda\x0f\x87\xae\x73\x43\x1b\x7f\x1e\x78\x1b\xc6\x65\x85\x94\xd3\x24\xdd\xc3\xa9\x9a\x5d\xf9\x69\x7f\x3d\xb9\xe9\x64\x8c\xee\x36\x29\xe9\xee\xa1\xd1\xda\x36\xda\x55\xa3\xb9\x63\xb6\x0b\xe4\x5b\x99\x65\x7c\xfd\xa5\x59\xc6\x67\xe9\x0d\xf7\x3a\x3d\xcb\x62\xc0\x1d\x40\x8e\x93\xf6\x49\xc9\x63\x27\xb3\x64\xbf\x46\xd1\xfa\x89\x1b\x1c\xdd\x7c\x0a\x08\x4a\x38\x4a\x93\xfb\x4b\xf0\x1c\xa2\xa2\x7d\x1c\x95\x7c\x1a\xe8\xca\x3d\x19\x82\xff\x4e\x81\x65\x7c\xff\xd8\xc9\x2c\xd6\x0e\x71\x7e\xcf\x11\x7b\x47\xc5\x06\x47\xfa\x92\x03\x2c\xe3\xe3\x9d\xaf\x6f\x31\x09\x22\x50\x01\x61\xfa\x98\xe6\xd0\x6f\x03\x9c\x2c\x06\x47\xdc\x04\x06\xe6\x90\x97\x65\x7e\x05\x00\x00\xff\xff\x26\x52\x61\xd0\x28\x04\x00\x00")

func language_zh_cn_yml() ([]byte, error) {
	return bindata_read(
		_language_zh_cn_yml,
		"language/zh-CN.yml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"language/en-US.yml": language_en_us_yml,
	"language/ja-JP.yml": language_ja_jp_yml,
	"language/zh-CN.yml": language_zh_cn_yml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"language/en-US.yml": &_bintree_t{language_en_us_yml, map[string]*_bintree_t{
	}},
	"language/ja-JP.yml": &_bintree_t{language_ja_jp_yml, map[string]*_bintree_t{
	}},
	"language/zh-CN.yml": &_bintree_t{language_zh_cn_yml, map[string]*_bintree_t{
	}},
}}
