package ReleaseFile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resources_language_en_us_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4f\x8b\x1c\x45\x14\xbf\x37\xf4\x77\x78\x74\x33\x68\x20\xd3\x63\x20\x1e\x6c\x64\x21\xbb\x4e\x8c\xba\x1b\x97\x9d\x09\x21\x64\x17\x52\x53\xfd\xba\xbb\x9c\x9a\x57\x6d\x55\xb5\x33\x9d\x10\xf0\x26\x81\x88\x17\x45\x41\xc1\x10\x10\xe2\x41\xf7\xe0\x45\x42\x3e\x8e\x99\x5d\x4f\xf9\x0a\x52\xd5\xd3\x99\xc9\xea\xaa\x90\xb9\x0c\x74\xbd\xf7\x7b\xbf\x3f\xaf\x2a\xde\x65\x54\xd4\xac\x40\x28\x99\x81\x09\x22\x01\x2f\x19\x15\x98\x81\x55\x80\xd4\xbf\x31\x0a\x83\xae\x66\x4f\x65\x22\x17\x98\x8d\x6a\xce\xd1\x98\xbc\x96\xb2\x49\x21\xfa\x57\x88\x7b\xbd\xb7\xee\x47\x61\x10\x7b\x28\xc8\x14\x1a\x20\x65\x11\x70\x21\x8c\x3d\x0b\xcd\x99\x15\x8a\xae\x32\x21\x31\x4b\x21\x72\xbd\x2f\x5b\xda\x8e\x28\x0c\xc2\x20\x1e\x97\xc2\x80\xec\xc6\xe6\x42\x22\x08\x03\x95\x56\x9f\x89\x0c\x33\x98\x34\x70\xeb\xd6\x18\xde\x2d\xad\xad\x4c\x3a\x18\xcc\xe7\xf3\xa4\x69\x6c\xc2\x95\x92\x83\xad\x30\xd8\x63\x82\x86\x5a\x2b\x3d\x16\x95\x49\x21\xda\xd7\x68\x0c\x30\x6a\x60\x8a\x8d\xd7\xbd\x10\x36\x49\x92\x28\x0c\x6e\x10\x9b\x48\xbc\x52\x55\xb2\x19\xa1\x31\x42\x51\x0a\x51\xfb\xd1\x15\x32\x77\x00\xb9\xd2\xc0\x80\x70\x0e\xab\x1a\x77\xb4\x27\x34\x13\x17\xa1\x92\xc8\x0c\x02\x2f\x91\x4f\xc1\x96\x08\x23\xb4\x56\x50\x61\xa2\x30\xd8\x51\x94\x8b\xe2\xaa\x90\x38\x5c\x70\xac\x6c\x8b\xee\x99\x81\x20\xe0\xfe\xb8\xce\xbd\x29\xae\x9c\x11\x29\xbb\xa3\x88\x90\x5b\x0f\xff\x0a\x17\x29\x68\xfa\x72\x30\x70\xa5\x35\x72\x2b\x9b\x33\x14\x36\xc6\x1f\xd4\xf4\xf1\x47\x29\x44\x07\x6a\xa2\x2c\xdc\xc4\xc9\x35\xa5\xa6\xa0\x71\x45\x05\xd0\x43\x67\x2f\x9e\x3d\xd4\x35\x91\xa0\x02\x14\x41\xa5\xb4\xed\x42\xbd\x5e\x67\x05\xa6\x10\xf9\xff\x36\x99\x0d\x6b\xfc\x8e\x40\x97\xc1\xdd\x32\x99\x29\x2c\x84\x96\x89\xd2\x45\xc2\x69\xcd\x4b\x91\x65\xdc\x7a\x73\x58\x36\x13\x24\x8c\xd5\xcc\x2a\x1d\x06\x37\xc5\x54\xec\x0a\x9a\x7a\x4b\x5e\x35\xde\xa3\x3b\x1e\xff\x8d\x03\x9e\xda\x35\x94\xd5\x18\x17\xd6\xe5\xdd\x36\x14\xca\x21\x75\x04\x0b\x61\xcb\x7a\x92\x70\x35\x1b\x50\xc3\x88\x33\x9b\xb1\xc1\x1e\x66\x82\x39\x16\xfd\x6d\x65\xe3\xde\xf0\xed\xde\x3b\x97\x7a\xdb\xef\xf5\x86\x97\x7b\xdb\xdb\xbd\x2b\x97\x7d\xf4\x82\x8c\xd5\x35\x77\x9e\x99\xd6\x85\x1d\x46\x6f\x58\xc8\x05\x65\x70\xdb\x2d\x5b\xc5\x0a\x3c\x72\x91\xde\x3e\xd7\x8e\xa3\xbf\xad\x0a\x6b\xa5\x08\xaa\x6a\xeb\xd6\x7b\x95\x68\x18\xbc\x8f\xd6\x51\xfa\x80\x72\xd5\x19\xb3\x39\xf0\x5e\xef\xd2\xfd\x76\x98\xb3\xe7\x7f\xe3\x76\x37\x0b\xc1\xb1\x05\xae\x6a\x99\xf9\x7b\x37\x41\xc8\x55\x4d\xd9\x45\x98\xd4\x6d\x6b\xae\xa4\x54\x73\xb7\x10\x1a\x4d\x2d\xad\x81\x39\xea\x55\x55\x18\xc4\x6b\xc9\x61\x10\xaf\xbc\xae\x0d\x42\x34\x2b\xd2\x7d\x87\x6d\x85\x95\x18\x39\xf3\x3f\xad\x51\x37\xc0\x0a\x26\xa8\x4d\xdb\x89\x1a\x21\xd3\xbc\x4c\x21\x7a\x6d\x32\x87\xe4\x2c\xd8\xa0\x70\xc7\x99\xb3\x41\xe2\xce\x19\x12\xad\x09\xe7\x86\x34\xe8\x94\x85\x41\xfc\xa6\xc6\x4c\x38\xe3\xbc\x5c\x07\x79\xd4\xdf\x5a\x4b\xbf\x10\x06\x71\xe2\x7f\x6b\x61\x07\xab\x8e\x14\xa2\x43\x5a\xf7\xfb\x98\xfa\x5b\x6d\x70\x17\x0e\x57\x24\x4e\xbe\xff\xf5\xf9\x83\x2f\x9f\x7f\x75\x7c\xf2\xf5\x93\xd3\xe3\x5f\x4e\x9f\x7c\xbe\xfc\xe1\x41\xda\xbd\xa4\x61\x10\x7f\xc2\xfa\x1f\xee\x87\x41\x7c\xb7\xec\xef\x5c\x5f\xbf\xa4\xbb\xc2\xb8\x01\xff\xdc\xde\x1a\xe2\x07\x8c\x9d\xfe\xe1\xac\xb2\xee\x09\x5f\x3e\xfa\xe2\xcf\xc7\xdf\xfd\xf1\xfb\xd3\x93\x9f\x9f\xbe\x78\xf6\x70\xf9\xed\xa3\xe5\x6f\xdf\x2c\x7f\xfc\xe9\xf4\xf8\x71\x14\x06\x7f\x05\x00\x00\xff\xff\xe0\xa8\x9f\x8d\x25\x06\x00\x00")

func resources_language_en_us_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_en_us_yml,
		"resources/language/en-US.yml",
	)
}

var _resources_language_ja_jp_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\x6f\x1a\x47\x14\x7d\x5f\x69\xff\x03\xda\x15\x52\xf3\x00\x34\x52\xfa\x50\x1e\x22\xc5\x2e\x69\xda\xda\x49\x14\x3b\xca\x83\x9d\x87\xf5\x32\x86\xa9\xf1\x2c\x82\x45\x8a\x13\x45\x62\x76\x09\xfe\x60\x2d\x5c\x2b\xc4\xad\xed\x1a\xe3\x4f\x02\x02\x22\xb9\x91\xb0\x4d\xe5\x1f\x73\xd9\x65\xf3\xc4\x5f\xa8\x66\x30\xc6\x75\xdd\x56\xaa\x1b\x1e\xd0\x4a\x33\xf7\x9c\x73\xcf\x3d\x57\x23\xbb\xe5\xb4\x5b\xd9\x02\xda\x78\x19\xf5\x0d\x3f\x04\x5a\xb5\xf7\x16\x9d\x8d\xdf\x80\xae\x01\x2d\x8a\xc2\x88\x42\x22\x29\x25\x82\x46\xb5\x30\x9e\xc6\x28\x3c\x96\x52\x55\x94\x4c\x4e\xa7\x62\xb1\xb9\xa0\x47\xba\xa8\x7e\xe5\xfd\xf2\xf5\x95\x62\x49\x14\x64\x0e\x7a\x71\x09\x68\x05\x68\xe6\x2a\xa8\xaa\xe8\x58\x23\xf7\x15\x1c\x43\xe1\xa0\x47\x62\x48\x57\x2a\x24\x51\x10\x85\x51\x05\x93\x50\x22\xa1\x25\xc6\x71\x3c\x19\xf4\x48\x40\x33\x40\xd7\xc1\xb0\x80\xd6\xc1\xa8\x81\xd9\x02\x63\xd5\x59\x6a\x01\xfd\x05\x68\xd9\x59\x38\x05\x23\xe7\xf7\xfb\xfd\x92\x28\x3c\x25\xca\x54\x0c\xdd\x8b\xc7\x63\x73\x63\x28\x99\xc4\x1a\x09\x7a\xa4\x51\x9c\x50\x30\xd0\xaa\xf3\xee\x03\xd7\x9b\x39\x3f\xea\xbc\x3d\x72\xab\x39\xa0\x87\x40\x97\x7b\xf4\xdd\x96\xe5\x96\x6b\x76\x7d\x1d\x8c\x55\x30\x29\x18\x87\x60\x9a\x60\x34\x78\xd9\x01\xd0\x3c\xd0\x6d\xa0\x85\x9e\xd0\x61\x8d\x4c\xe3\xc8\x7d\x1c\x43\xa1\x17\x2a\x8a\xeb\x3d\xb2\xf3\x7a\xb3\x00\x46\x09\x8c\x3d\x30\xab\x9d\xc2\x07\xbb\xd9\x64\x05\x0a\x21\x9a\x3e\xac\x11\x82\x54\x9d\x8b\xba\x2c\xae\xb6\xcb\x59\xf2\x60\x56\xc0\x3c\xe2\xa4\xff\x51\xd8\x93\x14\x79\xf4\x03\xf3\xcd\xdc\x64\xb7\xcc\x85\x67\x68\xea\x81\xa6\xcd\x00\xad\xdb\xf9\xb5\xf6\x59\x09\xa8\xf5\x88\x05\x80\x63\xef\x72\x80\x0c\x18\xb9\x6e\xcb\xe2\xc3\x35\x7f\x65\x16\x9b\x0b\x40\x0f\xed\x7a\xd1\x2d\x59\xed\x66\x4d\x12\x85\x87\xa9\x70\x04\x71\xd8\x25\x30\xe7\x7b\xff\x7c\x5e\x72\x54\xd7\xe3\xc9\x60\x20\xf0\x32\xea\x9f\xd5\x50\x04\x27\x62\x7e\x2d\x11\xf1\xab\x84\x71\x18\x3b\x4c\xa7\x71\x0a\xc6\xf1\x95\x8e\x3a\xf5\x52\x67\x25\xeb\xa6\xdf\x00\xad\x7e\x4a\xef\x76\x3e\x96\xfe\xda\x8e\x28\x3c\xc3\x33\x78\x04\x93\x19\x9e\x88\xf3\xd4\xdc\x1c\x97\x0b\x7f\x80\x62\xf1\x71\xf4\x42\x0f\x7a\xa4\xf6\xef\x67\x40\x33\xce\xbb\x63\xa0\x0d\x4f\xbf\x9f\x08\xd6\xa3\xa9\x29\xbf\xaa\xcd\x06\xc8\x9c\x42\x54\x45\x0f\x2b\x81\x51\x14\xc6\x0a\x13\xe5\x1b\xd2\x74\xd9\x1b\xfa\xca\xfb\xf5\x6d\xef\xd0\x37\xde\xd0\x1d\xef\xd0\x90\xf7\xde\x1d\x0f\xd0\x43\xb7\x72\x06\xf4\xf8\x3a\x4a\x79\xe2\x6f\xcd\x7a\xce\x27\xd2\x98\x60\xf1\x8f\x2b\x11\xf4\x1c\xa8\xe5\x1e\xe4\x80\xee\x01\xfd\x09\x8c\x45\xbe\x00\x15\xa0\x39\x3e\xb3\x62\xb7\x65\xd9\x6f\xf6\xed\xa5\x0d\xa0\x8d\x7e\x78\x32\xfc\xf4\x3d\xd0\x2c\xfb\xf8\xc7\x9c\x88\xc2\xb7\x48\x67\x6d\x7c\x47\xa6\xb5\xbe\xb7\x13\xcc\xdc\xbe\x8e\x57\xde\xdb\xaf\x3f\xaf\x86\x9e\x23\x60\xae\xf3\x95\x6e\x82\xb1\x3a\xe0\xba\xc4\x02\xd4\xea\xb6\xac\xf6\xe9\x7e\xbb\x99\x03\x5a\xef\x7c\x5c\x71\xb6\x36\xff\x7c\xb9\xc8\x9c\xbd\x30\x4e\x14\x64\xcf\x6c\x24\x38\x00\x36\xb3\x3c\xd1\x5b\x6c\x36\x60\x18\x40\xb3\xed\x66\xda\x3e\x39\xb0\x0b\x79\xa0\x19\x7b\x65\x01\x8c\x3c\xd0\x8d\x6b\xb3\xc7\xfc\x19\x43\x4a\x42\x8d\xf2\xec\xff\x0f\x5a\x27\x09\xb3\xd9\xc3\xfc\xbd\xb1\xc6\x7f\x59\xc0\x40\xdf\x13\x51\x90\xbf\xb0\xb3\xcb\x8e\x35\x6f\xd7\xd7\xb9\x53\x8f\x99\x53\xbe\xbb\x03\xd7\x6e\x89\x82\xec\xe7\xbf\x41\xe3\x4f\x50\x18\x27\x90\xca\x36\x64\x92\x5c\x02\xe0\x39\xf1\xdd\xed\x65\xe4\xd6\x24\xe9\xc9\xe8\x6c\xd4\xed\xc5\x65\x3b\xdf\xe8\xbc\x2d\xbb\x8d\x9a\x5b\x4e\x3b\x9b\x8b\x41\x51\x90\x11\xf1\x3d\x1d\x13\x05\xf9\x47\xc5\xf7\xfd\xe3\xfe\x63\x31\x78\x1d\x46\x70\x92\x31\x5c\x5f\xde\x73\x8b\x13\x8c\x63\x3d\x86\x42\xb3\x71\x9d\x3d\x48\xce\xf6\xfc\xa7\x9d\x9f\xdb\xcd\x93\xce\xfb\x93\x6e\xcb\x72\xd6\xb6\x9d\xa3\x82\x53\xdc\x77\x1b\x3b\x92\x28\xfc\x11\x00\x00\xff\xff\x07\x54\x89\x88\xee\x06\x00\x00")

func resources_language_ja_jp_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_ja_jp_yml,
		"resources/language/ja-JP.yml",
	)
}

var _resources_language_zh_cn_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x51\x4f\xdb\x56\x18\x7d\xb7\xe4\xff\x10\xd9\xb2\xb4\x3e\xc4\x59\xa5\xee\x61\x79\xa8\x54\x58\xba\x6e\x83\xae\x2a\x54\x7d\x28\x7d\x30\xce\xc5\xb9\xc3\x5c\x5b\x8e\x23\x95\x56\x95\xb2\xa9\x25\x44\x4d\x20\x88\x8c\x66\x6d\xb6\x36\xa0\x54\x99\x26\x6c\x44\xba\xc6\x73\x42\xf8\x33\xbe\xd7\xf6\x13\x7f\x61\xba\xbe\xa4\xac\x0c\x34\xcd\x8f\xbe\xf7\x7c\xe7\x3b\xe7\x7c\xf7\x13\x23\x77\x3f\xea\x95\xf1\xe0\x90\xbc\x7e\x4f\x9a\x7f\x05\x9e\xff\xb8\x90\x9e\xbe\xcd\x73\x33\x0a\xd2\x4a\x8a\x06\x66\x8d\x3c\x5c\x82\x20\x3f\x57\x52\x55\x50\x2c\x2e\x95\x74\x7d\x35\x9b\x12\xfe\x8d\x7b\x22\x7d\xfe\x54\xe0\x39\x31\xc1\xb3\xe3\xc0\xab\xe3\xfd\x16\x6e\xf7\xce\x97\x53\x15\x1b\x1a\xe8\xa6\x02\x75\x90\xcf\xa6\x04\x0a\x3d\x87\x10\x78\x8e\xe7\x66\x15\x88\x72\x96\x65\x58\xf3\xd0\x2c\x66\x53\x02\xa9\x55\x83\xe1\x90\x3c\xdb\x8c\x9b\x4e\x5c\x2e\xe3\x8a\x2f\xcb\xb2\x2c\xf0\xdc\x3d\xa4\x2c\xea\xe0\x86\x69\xea\xab\x73\xa0\x58\x84\x06\xa2\xb7\x5f\xbe\x25\xfd\x9f\x71\x63\x6b\x16\x5a\x0a\x0c\x9b\xfd\xc8\x1d\x90\x9d\x83\xf0\xd5\xb3\xd3\x3b\x27\xa3\x1a\xfd\xb5\x57\x26\x6f\xba\x91\x33\x0e\x8f\x1c\x81\xe7\xa6\x0d\xb4\x04\xb5\x9b\x50\x07\xb9\x47\x2a\x30\x6d\x56\x2b\x7e\x5e\x0f\x8f\x1c\xb2\x53\x09\x86\x1f\xf0\xe8\x27\xec\x79\xf4\xaa\x82\x90\x61\x4f\x1b\x08\x01\xd5\x4e\x48\x3e\xb2\x92\xfd\xbd\xb0\xe3\xc4\xdb\x63\xb2\xd1\x8d\x2a\xfd\xe4\xf0\x42\xba\xbb\x25\xf4\xfd\x77\x14\xd6\xf6\xf1\x2f\xbd\xc0\xf7\xef\x83\xc5\x5b\x86\xb1\x4c\x36\xba\xa4\xf9\x01\x0f\x0e\xf1\xa8\x8c\x1b\x2e\xc5\x1e\x37\xa2\x4e\x2d\xf0\x37\xa8\x5b\xe1\x1f\x2e\xde\xdc\x13\x78\xee\x76\x29\xaf\x01\x8a\x5f\xef\x07\x5e\x99\xac\xf7\x13\xe3\x44\xd6\x45\xe4\x1c\xc7\x2f\x9d\x82\x6d\x9b\xc5\x6c\x26\xf3\xb8\x20\xaf\x18\x40\x83\x96\x2e\x1b\x96\x26\xab\xa7\xfa\xa3\x1f\x9b\x61\x7f\x18\x3a\x9d\xb0\xb1\x86\xb7\x5a\x3c\x77\x1f\x2e\xc3\x19\x88\x96\x13\xe7\x3f\x2a\x62\xb5\x28\xf7\x85\xb0\x84\xf6\x16\xd0\xcd\x79\xf0\xc8\xce\xa6\x84\xe0\xe8\x38\x6c\xf6\x22\xf7\x3d\x69\x6d\x44\xee\x00\x57\xeb\x78\x5c\x4e\x4d\x5a\xd1\xa0\x5d\x28\x2d\xca\xaa\xb1\x92\x41\xab\x0a\x52\x15\x3b\xaf\x64\x66\x41\x1e\x2a\x94\x3c\x3d\x65\xd8\xa2\x94\xfb\x42\xfa\xf2\xaa\x34\xf5\x95\x94\xbb\x26\x4d\x4d\x49\x37\xae\xa5\xc8\x9b\x6e\xd8\x7e\xc1\x04\xe2\x76\xef\xc1\xa5\xc2\x1e\x06\xde\x3e\xa9\x8e\xe9\x30\xad\x1f\x3c\xa0\x53\x64\x2a\x1a\x78\x88\xb7\xdf\x7d\x92\xc1\x78\x1b\x3f\xef\x92\x96\x8b\x1b\xef\x58\x5e\x3c\xf7\x35\xb0\x69\x07\xdf\xa0\x25\x63\x22\x9f\x32\x51\xd9\x9f\x16\x7d\x22\x5d\x7d\xfa\xdf\x05\x4f\xc3\x38\xec\x90\x76\x95\x54\xc7\x78\xfd\x20\xee\xfc\x19\xff\xba\x7b\x32\xaa\x05\x47\x6b\xa4\xe5\xb2\x9f\x81\xbf\x16\x0c\xbb\x81\xf7\x22\x1c\x6e\x93\xdf\xda\x3c\x27\x9e\x35\xcd\x73\x62\xe4\x0e\x98\x9d\xa9\x15\x2d\xcb\x0a\x90\xb7\x95\x78\xb7\x95\x8a\x2b\x75\xb2\x73\x40\xa9\xdd\x5d\x16\x1c\xed\x7c\x0e\x28\x96\x5a\xa0\xc9\xfd\x4f\xe2\x05\xc4\x5e\xe2\x84\x8e\x8a\xbc\x9c\x90\x89\xbb\x34\x84\xcc\x44\x02\xcf\x89\x9f\xc5\x95\x3a\x76\x5e\xe1\xc6\x56\x22\xec\x0e\x15\x96\xbe\x7e\x26\xf2\x0a\xcf\x89\x72\xf2\x9d\xa9\xb8\x0b\xf2\xd0\x02\x2a\x1d\xa6\x05\xf4\x8f\x02\x49\x16\xe9\xeb\x2c\x81\x2b\x0b\x88\xb5\x11\xbe\x76\xe8\x8c\x6d\xba\xc9\xd4\xd1\x55\x42\xda\xd5\x2c\xcf\x89\x00\xa5\xef\xcd\xf1\x9c\xf8\x83\x92\xfe\xf6\xce\x64\x3d\x9d\xed\xa3\x19\x58\xa4\x0c\x17\xc3\x99\x1f\x09\xc1\x3c\xb4\x75\x90\x5b\x31\x6d\xba\xfc\x98\x19\x81\xe7\x87\xbf\xfb\x27\xa3\xda\xe9\x93\x9f\x98\xf2\x77\x00\x00\x00\xff\xff\x6a\x4e\x0b\x9f\x54\x05\x00\x00")

func resources_language_zh_cn_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_zh_cn_yml,
		"resources/language/zh-CN.yml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resources/language/en-US.yml": resources_language_en_us_yml,
	"resources/language/ja-JP.yml": resources_language_ja_jp_yml,
	"resources/language/zh-CN.yml": resources_language_zh_cn_yml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resources/language/en-US.yml": &_bintree_t{resources_language_en_us_yml, map[string]*_bintree_t{
	}},
	"resources/language/ja-JP.yml": &_bintree_t{resources_language_ja_jp_yml, map[string]*_bintree_t{
	}},
	"resources/language/zh-CN.yml": &_bintree_t{resources_language_zh_cn_yml, map[string]*_bintree_t{
	}},
}}
