package ReleaseFile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resources_language_en_us_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x6f\x8b\xdb\x46\x10\xc6\xdf\x0b\xf4\x1d\x06\x09\xd3\x06\x62\xb9\x81\xf4\x45\x45\x39\xc8\xb9\x4e\xd3\xf6\x2e\x3d\xce\x0e\x21\xe4\x0e\xb2\x5e\x8d\xa4\xa9\xd7\xb3\xea\xfe\x89\x4f\x09\xf9\x06\xfd\x48\xfd\x4e\xfd\x0a\x65\x57\x52\xec\x5c\x49\x5a\xa8\xdf\x18\xa4\x9d\x67\x9e\xf9\x3d\xa3\xcd\x2f\x04\x37\x5e\x34\x08\xad\xb0\xb0\x45\x64\x90\xad\xe0\x06\x2b\x70\x1a\x90\xe7\x2f\xd6\x69\x32\x9d\xb9\xd4\x15\xd5\x84\xd5\xda\x4b\x89\xd6\xd6\x5e\xa9\xbe\x84\xec\x8b\x12\xef\x67\xdf\x7c\xc8\xd2\x24\x8f\x52\x50\x69\xb4\xc0\xda\x21\xe0\x1d\x59\x77\x5f\x5a\x0a\x47\x9a\x9f\x0a\x52\x58\x95\x90\x85\xda\x8f\x25\x43\x45\x96\x26\x69\x92\x6f\x5a\xb2\xa0\xa6\xb6\x35\x29\x04\xb2\xd0\x19\xfd\x96\x2a\xac\x60\xdb\xc3\xab\x57\x1b\xf8\xbe\x75\xae\xb3\xe5\x62\x71\x38\x1c\x8a\xbe\x77\x85\xd4\x5a\x2d\xce\xd2\xe4\x52\x10\xaf\x8c\xd1\x66\x43\x9d\x2d\x21\xbb\x32\x68\x2d\x08\xee\x61\x87\x7d\x9c\xfb\x8e\x5c\x51\x14\x59\x9a\xbc\x60\xb1\x55\xf8\xa4\xeb\x54\xbf\x46\x6b\x49\x73\x09\xd9\xf0\x30\x1c\x14\xe1\x05\xd4\xda\x80\x00\xc6\x03\x8c\x67\xc2\xab\x4b\x32\x82\x1e\x42\xa7\x50\x58\x04\xd9\xa2\xdc\x81\x6b\x11\xd6\xe8\x1c\x71\x63\xb3\x34\x59\x6a\xae\xa9\x79\x4a\x0a\x57\x77\x12\x3b\x37\xa8\x47\x67\x40\x0c\x32\xbe\xf6\x75\x84\x12\x8e\x0b\x66\xed\x96\x9a\x19\xa5\x8b\xf2\x9f\x78\x51\xc4\xbb\x8f\x8d\x41\x6a\x63\x50\x3a\xd5\xdf\xb3\x70\xd2\xfe\xda\xf3\xaf\xbf\x94\x90\x5d\xeb\xad\x76\xf0\x12\xb7\xcf\xb4\xde\x81\xc1\xd1\x0a\x60\x94\xae\xfe\xfa\xf3\x0f\xe3\x99\x89\x1b\xd0\x0c\x9d\x36\x6e\x0a\xf5\xb9\xaf\x1a\x2c\x21\x8b\xff\x43\x32\x27\x68\xe2\x8e\xc0\x94\xc1\xbb\xb6\xd8\x6b\x6c\xc8\xa8\x42\x9b\xa6\x90\x7c\xf4\xa5\xd9\x09\xe9\x22\x1c\x51\xed\x89\xc9\x3a\x23\x9c\x36\x69\xf2\x92\x76\x74\x41\xbc\x8b\x48\x3e\x05\x1f\xd5\x83\x8f\x7f\xd7\x81\x68\xed\x19\xaa\x6e\x83\x77\x2e\xe4\x3d\x14\x34\x3a\x28\x4d\x06\x1b\x72\xad\xdf\x16\x52\xef\x17\xdc\x0b\x96\xc2\x55\x62\xb1\x6e\x49\xf3\xb9\x76\xf9\x6c\xf5\xed\xec\xbb\x47\xb3\xf3\x1f\x66\xab\xc7\xb3\xf3\xf3\xd9\x93\xc7\x31\x75\x62\xeb\x8c\x97\x01\x97\x1d\x00\x2c\x05\x7f\xe5\xa0\x26\xae\xe0\x75\xd8\xb3\x4e\x34\x78\x1b\xd2\x7c\xfd\x59\x12\xb7\xff\xd8\x12\x31\x4c\x41\xdc\x79\x17\x36\x7b\x0c\x33\x4d\x7e\x44\x17\x98\xfc\xc4\xb5\x9e\x98\x9c\x36\x7c\x3f\x7b\xf4\x61\x68\x16\xc8\xfc\x67\xdd\xe9\xa3\x42\x08\x6e\x41\x6a\xaf\xaa\xf8\xc9\x6d\x11\x6a\xed\xb9\x7a\x08\x5b\x3f\x94\xd6\x5a\x29\x7d\x08\xbb\x60\xd0\x7a\xe5\x2c\x1c\xd0\x8c\xa7\xd2\x24\x3f\x8e\x9c\x26\xf9\x88\xd9\x5b\x84\x6c\xdf\x94\x57\x41\xdb\x91\x53\x98\x05\xee\xbf\x7b\x34\x3d\x88\x46\x10\x0f\x41\x87\xa1\xd6\x28\x8c\x6c\x4b\xc8\xfe\xb7\x99\x1b\x0e\x08\x4e\x2c\xbc\x09\x70\x4e\x4c\xbc\xb9\x67\x62\x80\xf0\xd9\x90\x16\xd3\x64\x69\x92\x7f\x6d\xb0\xa2\x00\x2e\x8e\x1b\x24\x6f\xe7\x67\xc7\xd1\x1f\xa4\x49\x5e\xc4\xdf\x71\xb0\xeb\xb1\xa2\x84\xec\x86\x8f\xf5\x31\xa6\xf9\xd9\x10\xdc\x83\x9b\xd1\xc4\xd2\x1b\x83\xec\x54\x0f\xe2\xad\x20\x15\x77\x7e\xba\xed\x6c\x09\xd3\x6d\x9a\x26\xf9\x6f\x62\xfe\xf3\x55\x9a\xe4\xef\xda\xf9\xf2\xf9\xf1\x36\xbd\x20\x1b\x3a\x7d\x49\xa7\x1c\x00\xc5\x86\x9b\xc0\x63\xb5\xef\x5c\x3f\x92\x8f\x80\xc2\x82\x60\x78\x08\x82\x2b\x90\xf1\xf2\x09\x21\x04\x66\x84\x55\x96\x26\x7f\x07\x00\x00\xff\xff\xfd\x24\x04\x30\x3d\x06\x00\x00")

func resources_language_en_us_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_en_us_yml,
		"resources/language/en-US.yml",
	)
}

var _resources_language_ja_jp_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x41\x6f\x1a\x47\x14\xc7\xef\x2b\xed\x77\x40\xbb\x42\x6a\x0e\x40\x23\xa5\x87\x72\x88\x14\xbb\xa4\x69\x6b\x27\x51\x70\x94\x83\x9d\xc3\x7a\x19\xc3\xd4\x78\x16\xc1\x22\xc5\x89\x22\xf1\x66\x09\x21\x66\x23\x5c\xab\x4e\x54\xdb\xb5\x4b\xec\x18\x17\x64\x88\x94\x44\xc2\x35\x95\x3f\xcc\x63\x81\x9e\xfc\x15\xaa\x19\x8c\x71\x9d\xb4\x95\xea\x86\x03\x5a\x69\xe7\xfd\xdf\x7f\x7e\xef\x3f\x3b\x7a\x7f\x2f\xd7\xaf\x6d\x22\x34\x1f\x26\x02\xe3\x37\x11\xea\xde\xce\xb3\xee\xfa\x3b\x84\x97\x08\x5b\xaa\x32\x61\xb0\x78\xd6\x88\x93\x49\x2b\x46\xe7\x28\x89\x45\xb3\xa6\x49\x32\x99\xb9\x6c\x32\xb9\x18\xf6\x69\xa7\xd5\x8f\xfc\x9f\x3f\x3e\x57\xac\xa9\x8a\x2e\x45\x4f\x17\x21\xd4\x10\xf2\xe7\x45\x4d\xc3\xa6\x16\xbb\x6e\xd0\x24\x89\x85\x7d\x9a\x50\x3a\x57\xa1\xa9\x8a\xaa\x4c\x1a\x94\x45\xd2\x69\x2b\x3d\x45\x53\x99\xb0\x4f\x43\xc8\x23\xac\x21\x77\x11\x1a\xc8\xf7\xd1\x69\x23\x5f\xe9\x2e\xb5\x11\x7e\x42\xd8\xeb\x16\x0f\x91\x97\x82\xc1\x60\x50\x53\x95\xbb\xcc\x98\x4d\x92\x6b\xa9\x54\x72\x31\x4a\x32\x19\x6a\xb1\xb0\x4f\x9b\xa4\x69\x83\x22\xd4\xbb\x2f\xde\x48\xbf\xf9\x93\x57\xbd\x1f\xdf\xf6\xeb\x25\x84\x2a\xc2\xf3\x41\xfb\xe3\xb6\xdb\xdf\xdb\xf7\x1a\x6b\xc8\x57\xd0\x01\xe4\x55\x74\x1c\xe4\x4d\x59\xb6\x8b\x50\x46\xf8\x05\x61\x75\x60\x74\xdc\x62\x73\x34\x7e\x9d\x26\x49\xe4\x81\x49\x52\xf6\xa0\xd9\x49\xbd\xb3\x8a\xbc\x82\x7c\x07\x9d\x7a\x6f\xf5\x8d\xd7\x6a\x89\x02\x83\x31\xcb\x1e\xb7\x18\x23\xa6\x2d\x4d\x9d\x35\xb7\xbf\x2d\xbb\x94\xd1\xa9\xa1\xf3\x56\x36\xfd\x8f\xc6\xee\x64\xd9\xad\xef\x04\x37\x67\x43\xac\x72\x8a\xf7\xc8\xec\x0d\xcb\x9a\x47\x68\x78\xe5\x97\x9d\xa3\x0a\x82\x7b\x4b\x04\x40\x6a\x6f\x4b\x81\x3c\xf2\xd2\x71\xdb\x95\xc3\x75\x7e\x16\x88\x9d\x22\x42\xd5\x6b\x6c\xf5\x2b\x6e\xa7\xb5\xaf\xa9\xca\xcd\x6c\x2c\x4e\xa4\xec\x12\x3a\x4f\x07\xff\x72\x5e\x7a\xc2\xb6\x53\x99\x70\x28\xf4\x30\x11\x5c\xb0\x48\x9c\xa6\x93\x41\x2b\x1d\x0f\x9a\x4c\xf4\xe0\xaf\x84\x4f\x7e\x88\xfc\xe0\xdc\x8e\x7a\x8d\x4a\x6f\xb9\xd0\xcf\x3d\x41\xa8\xff\x91\xdb\xee\xbd\xaf\x7c\xb8\x1d\x55\xb9\x47\xe7\xe9\x04\x65\xf3\x32\x11\x27\xa9\xb9\xb8\xae\x34\x7e\x83\x24\x53\x53\xe4\x81\x1d\xf6\x69\x9d\xdf\x8f\x10\xf2\xdd\x17\x07\x08\x4d\xdf\x70\x3f\x71\x6a\x27\xb2\xb3\x41\xd3\x5a\x08\xb1\x45\x83\x99\x86\x1d\x33\x42\xd1\x04\xb5\xd8\x98\x65\xeb\xfe\xc8\x17\xfe\x2f\x2f\xfb\xc7\xbe\xf2\x47\xae\xf8\xc7\xc6\xfc\xd7\xae\xf8\x10\xaa\xfd\xda\x11\xc2\xc1\xc7\xba\xe9\xd3\x7f\xcb\xe9\xbe\x1c\x46\x73\x5a\x24\x3f\x65\xc4\xc9\x7d\x04\xb7\xbf\x5b\x42\xd8\x41\xf8\x01\xf9\x33\x99\xfd\x1a\x42\x49\x8e\x6b\xeb\xb8\xed\x7a\x4f\x5e\x7b\x4b\xeb\x08\xcd\x61\x6e\xf2\xf2\xed\xaf\x08\x05\xf1\xf0\x8f\x11\x51\x95\xaf\x89\x2d\xb0\x7e\xc3\xe6\xac\x21\xd6\x69\xc1\x75\xe8\xe3\x91\xff\xf2\xe3\x4f\xeb\x61\x40\x04\x9d\x35\x79\x9a\x5b\xc8\x57\x46\xbd\xce\x74\x41\x70\x8f\xdb\x6e\xe7\xf0\x75\xa7\x55\x42\x68\xf4\xde\x2f\x77\x37\x37\xfe\xba\x78\x4b\x90\x3d\x05\xa7\x2a\xba\x6f\x21\x1e\x1e\x09\x3b\x05\x19\xe6\x4d\x31\x1b\xe4\x1c\xa1\xd0\x69\xe5\xbc\xdf\x76\xbd\xd5\x32\x42\xde\x5b\x2e\x22\x2f\x23\xac\x7f\x34\x76\x82\x4f\x94\x18\x69\x33\x21\x63\xff\x3f\x78\x9d\x61\x02\xb3\x4f\xf0\xbd\xb0\xc7\x7f\x39\x7b\xa1\x21\x13\x55\xd1\x3f\xf3\x0a\xcf\xbb\xee\x53\xaf\xb1\x26\x49\xdd\x16\xa4\x02\x57\x47\xd4\x2e\xa9\x8a\x1e\x94\xbf\xd1\xc6\xef\x90\x18\x4d\x13\x53\x1c\x8e\x19\x76\x46\x40\xe6\x24\x70\x75\x90\x91\x4b\x33\x6c\x60\xa3\x73\xb8\x24\x8f\x50\x11\x79\x69\xf0\x4d\x0f\xab\x8a\x4e\x58\xe0\x6e\x54\x55\xf4\xef\x8d\xc0\xb7\xb7\x87\x97\xc4\xe8\x56\x98\xa0\x19\x79\xf6\x3e\xac\x1d\x70\x92\xd2\x53\xd4\x4e\x92\xc8\x42\xca\x5e\x94\x43\x38\x41\x75\x7a\x63\x88\x3b\x01\xaa\x98\x83\xee\xce\x46\xef\xdd\xab\xb3\x9f\x02\x4d\x55\xfe\x0c\x00\x00\xff\xff\x2e\x98\x0e\x15\xf5\x06\x00\x00")

func resources_language_ja_jp_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_ja_jp_yml,
		"resources/language/ja-JP.yml",
	)
}

var _resources_language_zh_cn_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x51\x6f\xd3\x56\x18\x7d\xb7\xe4\xff\x10\xd9\x8a\x34\x1e\xe2\x0c\x89\x3d\x2c\x0f\x48\xb4\x0b\x63\x5b\xcb\x10\x29\xe2\x81\xf2\xe0\x3a\xb7\xce\x5d\xdd\x6b\xcb\x71\x24\x0a\x42\xca\x26\x68\x1a\x91\xb4\xa9\x9a\x95\x0c\xb2\x41\x5a\x05\x65\x9a\x6a\x57\x0d\x23\x9e\x93\xa6\x7f\xc6\xf7\xda\x7e\xea\x5f\x98\xae\x6f\x43\x46\xd7\x6a\x9a\x1f\x7d\xef\xf9\xce\x77\xce\xf9\xee\x27\x86\xce\x41\xd8\x2b\xe3\xc1\x11\x79\xfd\x9e\x34\xff\xf2\x5d\xef\x71\x21\x35\x7b\x9b\xe7\xe6\x64\xa4\x96\x64\x15\xcc\xeb\x79\xb8\x0c\x41\x3e\x57\x52\x14\x50\x2c\x2e\x97\x34\x6d\x2d\x93\x10\xfe\x8d\x7b\x92\xfc\xfc\xa9\xc0\x73\x62\x8c\x67\xc7\xbe\x5b\xc7\x07\x2d\xdc\xee\x9d\x2f\xa7\xc8\x16\xd4\xd1\x4d\x19\x6a\x20\x9f\x49\x08\x14\x7a\x0e\x21\xf0\x1c\xcf\xcd\xcb\x10\x65\x4d\x53\x37\x17\xa0\x51\xcc\x24\x04\x52\xab\xfa\xc3\x21\x79\xb6\x15\x35\xed\xa8\x5c\xc6\x15\x4f\x92\x24\x49\xe0\xb9\x7b\x48\x5e\xd2\xc0\x0d\xc3\xd0\xd6\x72\xa0\x58\x84\x3a\xa2\xb7\x5f\xbe\x25\xfd\x9f\x71\x63\x7b\x1e\x9a\x32\x0c\x9a\xfd\xd0\x19\x90\xdd\xc3\xe0\xd5\xb3\xb3\x3b\xa7\xa3\x1a\xfd\xb5\x5f\x26\x6f\xba\xa1\x3d\x0e\x8e\x6d\x81\xe7\x66\x75\xb4\x0c\xd5\x9b\x50\x03\xd9\x47\x0a\x30\x2c\x56\x2b\x7a\x5e\x0f\x8e\x6d\xb2\x5b\xf1\x87\x1f\xf0\xe8\x27\xec\xba\xf4\xaa\x8c\x90\x6e\xcd\xea\x08\x01\xc5\x8a\x49\x3e\xb2\x92\x83\xfd\xa0\x63\x47\x3b\x63\xb2\xd9\x0d\x2b\xfd\xf8\xf0\x42\xba\xbb\x25\xf4\xfd\x77\x14\xd6\xf6\xf0\x2f\x3d\xdf\xf3\xee\x83\xa5\x5b\xba\xbe\x42\x36\xbb\xa4\xf9\x01\x0f\x8e\xf0\xa8\x8c\x1b\x0e\xc5\x9e\x34\xc2\x4e\xcd\xf7\x36\xa9\x5b\xc1\x1f\x0e\xde\xda\x17\x78\xee\x76\x29\xaf\x02\x8a\xdf\xe8\xfb\x6e\x99\x6c\xf4\x63\xe3\x44\xd6\x45\x68\x9f\x44\x2f\xed\x82\x65\x19\xc5\x4c\x3a\xfd\xb8\x20\xad\xea\x40\x85\xa6\x26\xe9\xa6\x2a\x29\x67\xfa\xc3\x1f\x9b\x41\x7f\x18\xd8\x9d\xa0\xb1\x8e\xb7\x5b\x3c\x77\x1f\xae\xc0\x39\x88\x56\x62\xe7\x3f\x2a\x62\xb5\x28\xf7\x85\xb0\x98\xf6\x16\xd0\x8c\x05\xf0\xc8\xca\x24\x04\xff\xf8\x24\x68\xf6\x42\xe7\x3d\x69\x6d\x86\xce\x00\x57\xeb\x78\x5c\x4e\x4c\x5a\x51\xa1\x55\x28\x2d\x49\x8a\xbe\x9a\x46\x6b\x32\x52\x64\x2b\x2f\xa7\x73\x05\xa8\xa3\x19\xdd\x12\x93\xd9\x2f\x92\x5f\x5e\x4d\xce\x7c\x95\xcc\x5e\x4b\xce\xcc\x24\x6f\x5c\x4b\x90\x37\xdd\xa0\xfd\x82\x69\xc3\xed\xde\x83\x4b\x35\x3d\xf4\xdd\x03\x52\x1d\xd3\x39\xda\x38\x7c\x40\x07\xc8\x90\x55\xf0\x10\xef\xbc\xfb\xc4\xfe\xf1\x0e\x7e\xde\x25\x2d\x07\x37\xde\xb1\xa8\x78\xee\x6b\x60\x51\xe5\xdf\xa0\x65\x7d\xa2\x9c\x32\x51\xc5\x9f\x16\x7d\x92\xbc\xfa\xf4\xbf\x0b\x9e\xe5\x70\xd4\x21\xed\x2a\xa9\x8e\xf1\xc6\x61\xd4\xf9\x33\xfa\x75\xef\x74\x54\xf3\x8f\xd7\x49\xcb\x61\x3f\x7d\x6f\xdd\x1f\x76\x7d\xf7\x45\x30\xdc\x21\xbf\xb5\x79\x4e\x9c\x36\xcd\x73\x62\xe8\x0c\x98\x93\x89\x55\x35\xc3\x0a\x90\xb7\x95\x68\xaf\x95\x88\x2a\x75\xb2\x7b\x48\xa9\x9d\x3d\x96\x19\xed\x3c\x07\x64\x53\x29\xd0\xd0\xfe\x27\xf1\x22\x62\x8f\x70\x42\x47\x45\x5e\x4e\xc8\xc4\x5d\x1a\x42\x7a\x22\x81\xe7\xc4\xcf\xa2\x4a\x1d\xdb\xaf\x70\x63\x3b\x16\x76\x87\x0a\x4b\x5d\x9f\x8a\xbc\xc2\x73\xa2\x14\x7f\x53\x15\x77\x41\x1e\x9a\x40\xa1\x73\xb4\x88\xfe\x51\x20\xce\x22\x75\x9d\x25\x70\x65\x11\xb1\x36\x82\xd7\x36\x1d\xaf\x2d\x27\x1e\x38\xba\x45\x48\xbb\x9a\xe1\x39\x11\xa0\xd4\xbd\x1c\xcf\x89\x3f\xc8\xa9\x6f\xef\x4c\x36\xd3\x74\x15\xcd\xc1\x22\x65\xb8\x18\xce\xfc\x88\x09\x16\xa0\xa5\x81\xec\xaa\x61\xd1\xbd\xc7\xcc\xf0\x5d\x2f\xf8\xdd\x3b\x1d\xd5\xce\x5e\xfb\xc4\x94\xbf\x03\x00\x00\xff\xff\xcb\x7d\xca\x65\x4f\x05\x00\x00")

func resources_language_zh_cn_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_zh_cn_yml,
		"resources/language/zh-CN.yml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resources/language/en-US.yml": resources_language_en_us_yml,
	"resources/language/ja-JP.yml": resources_language_ja_jp_yml,
	"resources/language/zh-CN.yml": resources_language_zh_cn_yml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resources/language/en-US.yml": &_bintree_t{resources_language_en_us_yml, map[string]*_bintree_t{
	}},
	"resources/language/ja-JP.yml": &_bintree_t{resources_language_ja_jp_yml, map[string]*_bintree_t{
	}},
	"resources/language/zh-CN.yml": &_bintree_t{resources_language_zh_cn_yml, map[string]*_bintree_t{
	}},
}}
