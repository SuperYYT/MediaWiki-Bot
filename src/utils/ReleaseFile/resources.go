package ReleaseFile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resources_language_en_us_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xe1\x8a\xdb\x46\x10\xc7\xbf\x0b\xf4\x0e\x83\x44\x68\x03\xb1\xdc\x7e\x15\xe5\xa0\x98\x4b\xd3\xf6\x2e\x3d\xce\x0e\x21\xe4\x0e\xb2\x5e\x8d\xa4\xa9\xd7\x33\xea\xee\x2a\xb6\x2e\xe4\x0d\xfa\x48\x7d\xa7\xbe\x42\xd9\x95\x75\x76\xae\xdc\xb5\x10\x7f\x31\x48\x3b\xff\xf9\xcf\xef\x3f\xda\xfc\x42\x71\xd3\xab\x06\xa1\x55\x0e\xd6\x88\x0c\xba\x55\xdc\x60\x05\x5e\x00\x79\xf6\x66\x99\x26\xd3\x99\x4b\xa9\xa8\x26\xac\x96\xbd\xd6\xe8\x5c\xdd\x1b\x33\x94\x90\x3d\x29\xf1\xe9\xd9\x77\x9f\xb3\x34\xc9\xa3\x14\x54\x82\x0e\x58\x3c\x02\xee\xc9\xf9\x87\xd2\x5a\x79\x12\x7e\xa9\xc8\x60\x55\x42\x16\x6a\xef\x4b\xc6\x8a\x2c\x4d\xd2\x24\x5f\xb5\xe4\xc0\x4c\x6d\x6b\x32\x08\xe4\xa0\xb3\xf2\x91\x2a\xac\x60\x3d\xc0\xbb\x77\x2b\xf8\xa1\xf5\xbe\x73\xe5\x7c\xbe\xdb\xed\x8a\x61\xf0\x85\x16\x31\xf3\xb3\x34\xb9\x54\xc4\xe7\xd6\x8a\x5d\x51\xe7\x4a\xc8\xae\x2c\x3a\x07\x8a\x07\xd8\xe0\x10\xe7\xde\x93\x2f\x8a\x22\x4b\x93\x37\xac\xd6\x06\x7f\xec\x3a\x33\x2c\xd1\x39\x12\x2e\x21\x1b\x1f\x86\x83\x2a\xbc\x80\x5a\x2c\x28\x60\xdc\xc1\xe1\x4c\x78\x75\x49\x56\xd1\x0b\xe8\x0c\x2a\x87\xa0\x5b\xd4\x1b\xf0\x2d\xc2\x12\xbd\x27\x6e\x5c\x96\x26\x0b\xe1\x9a\x9a\x97\x64\xf0\x7c\xaf\xb1\xf3\xa3\x7a\x74\x06\xc4\xa0\xe3\xeb\xbe\x8e\x50\xc2\x71\xc5\x2c\x7e\x21\xcc\xa8\x7d\x94\xff\xc2\x8b\x21\xde\xdc\x37\x06\x2d\xd6\xa2\xf6\x66\x78\x60\xe1\xa4\xfd\x75\xcf\xbf\xfd\x5a\x42\x76\x2d\x6b\xf1\xf0\x16\xd7\xaf\x44\x36\x60\xf1\x60\x05\x30\x4a\x57\x7f\xff\xf5\xa7\xed\x99\x89\x1b\x10\x86\x4e\xac\x9f\x42\x7d\xdd\x57\x0d\x96\x90\xc5\xff\x31\x99\x13\x34\x71\x47\x60\xca\xe0\xae\x2d\xb6\x82\x0d\x59\x53\x88\x6d\x0a\xcd\x47\x5f\xc2\x5e\x69\x1f\xe1\xa8\x6a\x4b\x4c\xce\x5b\xe5\xc5\xa6\xc9\x5b\xda\xd0\x05\xf1\x26\x22\xf9\x12\x7c\x54\x0f\x3e\xfe\x5b\x07\xa2\xb5\x57\x68\xba\x15\xee\x7d\xc8\x7b\x2c\x68\x24\x28\x4d\x06\x5d\x4b\xc2\x6b\xf1\xc5\x7e\xb8\x9b\x4f\xbb\xe5\xe6\x71\x6f\xe7\x0b\xd9\x6e\x15\x57\xf3\x18\x35\xb1\xf3\xb6\xd7\x81\x91\x1b\xa7\x5e\x28\xfe\xc6\x43\x4d\x5c\xc1\xfb\xb0\x5c\x9d\x6a\xf0\x36\x44\xf8\xfe\xd1\xf1\x6f\xff\xb5\x1a\x6a\xb4\x4e\xdc\xf5\x3e\xac\xf3\x21\xc1\x34\xf9\x09\x7d\x00\xf1\x33\xd7\x32\x81\x38\x6d\xf8\xe9\xd9\xf7\x9f\xc7\x66\x01\xc7\xff\xd6\x9d\xbe\x24\x84\xe0\x16\xb4\xf4\xa6\x8a\xdf\xd9\x1a\xa1\x96\x9e\xab\x17\xb0\xee\xc7\xd2\x5a\x8c\x91\x5d\x58\x00\x8b\xae\x37\xde\xc1\x0e\xed\xe1\x54\x9a\xe4\xc7\x91\xd3\x24\x3f\xb0\xed\x1d\x42\xb6\x6d\xca\xab\xa0\xed\xc9\x1b\xcc\x02\xec\x3f\x7a\xb4\x03\xa8\x46\x11\x8f\xe9\x86\xa1\x96\xa8\xac\x6e\x4b\xc8\xbe\xda\xcc\x0d\x07\x04\x27\x16\x3e\x04\x38\x27\x26\x3e\x3c\x30\x31\x42\x78\x34\xa4\xf9\x34\x59\x9a\xe4\xdf\x5a\xac\x28\x80\x8b\xe3\x06\xc9\xdb\xd9\xd9\x71\xf4\xe7\x69\x92\x17\xf1\x77\x1c\xec\xfa\x50\x51\x42\x76\xc3\xc7\xfa\x18\xd3\xec\x6c\x0c\xee\xf9\xcd\xc1\xc4\xa2\xb7\x16\xd9\x9b\x01\xd4\x47\x45\x26\x2e\xfa\xfd\x1a\x96\x30\x5d\xa1\x69\x92\xff\xae\x66\xbf\x5c\xa5\x49\x7e\xd7\xce\x16\xaf\x8f\x57\xe8\x05\xb9\xd0\xe9\x29\x9d\x72\x04\x14\x1b\xae\x02\x8f\xf3\x6d\xe7\x87\x03\xf9\x08\x28\x2c\x08\x86\x87\xa0\xb8\x02\x1d\x6f\x9c\x10\x42\x60\x46\x58\x65\x69\xf2\x4f\x00\x00\x00\xff\xff\xd2\x8c\xcd\x90\x32\x06\x00\x00")

func resources_language_en_us_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_en_us_yml,
		"resources/language/en-US.yml",
	)
}

var _resources_language_ja_jp_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x41\x6f\x1a\x47\x14\xc7\xef\x2b\xed\x77\x40\x8b\x22\x35\x07\x96\xf6\xca\x21\x52\x65\x39\x4d\x5b\x3b\x89\x62\x47\x39\xd8\x39\xac\x61\x0c\x53\x2f\xb3\x88\x5d\x24\xdb\x51\x24\xde\x2c\x21\xc4\x6c\x84\x6b\xd5\x89\x6a\xbb\x76\x89\x1d\xe3\x82\x0c\x91\x92\x48\xb8\xa6\xf2\x87\x79\x2c\xd0\x93\xbf\x42\x35\xb3\x60\x5c\x27\x6d\xa5\xa6\xe5\x80\x90\x76\xdf\xff\xfd\xe7\xf7\xfe\x8f\x09\x0f\x8e\xf2\x83\xfa\x2e\x42\x6b\x35\x15\x99\xb8\x8d\xd0\xf0\x0f\x9e\xf5\xb6\xdf\x21\xbc\x44\xd8\x53\x95\x29\x83\x25\x73\x46\x92\x4c\x5b\x09\xba\x48\x49\x62\x26\x17\x8f\x13\xdb\x5e\xcc\x99\xe6\x4a\x2c\xa4\x5d\x54\x3f\xba\xf6\xf9\xe3\x2b\xc5\x9a\xaa\x84\xa5\xe8\xc5\x4b\x08\x75\x84\xc2\x55\xd1\xb8\xe1\x50\x8b\xdd\x34\xa8\x49\x12\xb1\x90\x26\x94\xae\x54\x68\xaa\xa2\x2a\xd3\x06\x65\x93\xd9\xac\x95\x9d\xa5\x19\x3b\x16\xd2\x10\x0a\x08\x5b\xc8\x3d\x84\x26\xf2\x63\x74\x3b\xc8\x37\x7a\x6b\x1d\x84\x1f\x11\x8e\x7a\xa5\x53\xe4\x65\x5d\xd7\x75\x4d\x55\xee\x33\x63\xc1\x24\x5f\x66\x32\xe6\xca\x0c\xb1\x6d\x6a\xb1\x58\x48\x9b\xa6\x59\x83\x22\x34\x7a\x2f\xde\x48\xbf\x85\xe1\xa3\xfe\x0f\x6f\x07\x8d\x32\x42\x0d\xe1\x79\xd0\xfe\xbc\xe3\x0d\x8e\x8e\xfd\xe6\x16\xf2\x0d\x74\x01\x79\x0d\x5d\x17\x79\x4b\x96\x1d\x22\x54\x10\x7e\x46\xd8\x0c\x8c\x4e\x58\x6c\x91\x26\x6f\x52\x93\x4c\x2e\xc7\x49\xc6\x09\x9a\x0d\xeb\xdd\x4d\xe4\x55\xe4\x07\xe8\x36\xfa\x9b\x6f\xfc\x76\x5b\x14\x18\x8c\x59\xce\x84\xc5\x18\x89\x3b\xd2\xd4\x65\x73\xc7\xfb\xb2\x4b\x05\xdd\x3a\xba\x6f\x65\xd3\x7f\x69\xec\x5e\x8e\xdd\xf9\x56\x70\x73\x77\xc4\x5b\x6e\xe9\x01\x59\xb8\x65\x59\x4b\x08\x4d\xbf\xf2\xb2\x7b\x56\x45\xf0\xee\x88\x00\x48\xed\x7d\x29\x50\x40\x5e\x3e\xef\x78\x72\xb8\xee\x4f\x02\xb1\x5b\x42\xa8\xf9\xcd\xbd\x41\xd5\xeb\xb6\x8f\x35\x55\xb9\x9d\x4b\x24\x89\x94\x5d\x43\xf7\x69\xf0\x2d\xe7\x15\x4e\x39\x4e\xc6\x8e\x45\xa3\xab\x29\x3d\x6d\x91\x24\xcd\x9a\xba\x95\x4d\xea\x71\x26\x7a\xf0\x57\xc2\x27\x3f\x45\x7e\x72\xe5\x44\xfd\x66\xb5\xbf\x5e\x1c\xe4\x9f\x20\x34\x7e\xcf\xef\xf7\xdf\x57\x3f\x3c\x8e\xaa\x3c\xa0\x4b\x74\x8a\xb2\x25\x99\x88\x61\x6a\x3e\x5d\x57\x1a\xbf\x45\xcc\xcc\x2c\x59\x76\x62\x21\xad\xfb\xdb\x19\x42\xa1\xf7\xe2\x04\xa1\x15\x1a\x9d\xc7\x4e\x51\x8b\x2d\x58\x8e\xbe\xbc\xb2\x1a\x35\x87\x51\xb6\xa3\xdf\x19\x91\x6f\xee\x46\x27\xac\x74\xda\x60\x89\x68\x08\xa1\x36\xa8\x9f\x21\x9c\x7c\xac\x45\x78\xee\x2f\xe1\x3c\x94\x13\x68\xcd\x89\xb8\x67\x8c\x24\x79\x88\xe0\x0d\x0e\xcb\x08\x07\x08\xdf\x23\x7f\x26\x03\x5f\x47\x28\xcb\x19\xed\x9d\x77\x3c\xff\xc9\x6b\x7f\x6d\x1b\xa1\x35\x0a\x4b\x41\x3e\xfd\x05\xa1\x28\x7e\xfc\x6d\x2e\x54\xe5\x2b\xe2\x08\x96\x5f\xb3\x45\x6b\xc4\x72\x4e\xc0\x1c\xf9\x78\x74\xed\x8b\xc7\xff\xaf\x87\x80\x08\xba\x5b\x72\x85\xdb\xc8\x37\xc6\xbd\x2e\x75\x41\xf0\xce\x3b\x5e\xf7\xf4\x75\xb7\x5d\x46\x68\xf6\xdf\xaf\xf7\x76\x77\xfe\xfc\xf2\x9e\x20\x7b\x01\x4e\x55\xc2\xa1\x74\x32\x36\x16\x76\x8b\x32\xc1\xbb\x62\x36\xc8\x39\x42\xb1\xdb\xce\xfb\xbf\x1e\xfa\x9b\x15\x84\x82\xbf\x5e\x42\x5e\x41\xd8\xfe\x68\xd6\x04\x9f\x19\x62\x64\xe3\x29\x99\xf5\xff\xc0\xeb\x3c\x13\x98\x43\x82\xef\x27\x7b\xfc\x87\x85\x8b\x8e\x98\xa8\x4a\xf8\x33\xbf\xf8\xbc\xe7\x3d\xf5\x9b\x5b\x92\xd4\x5d\x41\x2a\x72\x63\x4c\xed\xba\xaa\x84\x75\xf9\x19\x1f\xfc\x1e\x49\xd0\x2c\x89\x8b\x8d\x98\x67\x97\x04\x64\x4e\x22\x37\x82\x8c\x5c\x9f\x67\x81\x8d\xee\xe9\x9a\xdc\x9b\x12\xf2\x72\xf0\x47\x1e\x53\x95\x30\x61\x91\xfb\x33\xaa\x12\x96\x6b\x32\xba\x19\xc6\x57\xc1\x14\xb5\xe5\xc2\x7d\x58\x1b\x70\x92\xd2\xb3\xd4\x31\xc9\x64\x3a\xe3\xac\xc8\x21\x0c\x51\x5d\x5c\x13\xe2\x22\x80\x1a\xe6\xa1\x77\xb0\xd3\x7f\xf7\xea\xf2\xfe\x6b\xaa\xf2\x47\x00\x00\x00\xff\xff\xa2\xd8\x44\x8d\xea\x06\x00\x00")

func resources_language_ja_jp_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_ja_jp_yml,
		"resources/language/ja-JP.yml",
	)
}

var _resources_language_zh_cn_yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x51\x4f\xdb\x56\x18\x7d\xb7\xe4\xff\x60\xd9\xaa\xb4\x3e\xc4\xd9\x5e\xf3\x50\x69\x42\x74\xdd\x06\x5d\x55\xa8\xfa\x50\xfa\x60\x9c\x8b\x73\x87\x73\x6d\xd9\x8e\x04\x54\x95\xb2\xa9\x25\x44\x4d\x20\x88\x8c\x66\x6d\xb6\x36\xa0\x54\x99\x26\x6c\x44\xba\xc6\x73\x42\xf8\x33\xbe\xd7\xf6\x13\x7f\x61\xba\xbe\xa4\x59\x19\x68\xaa\x1f\x7d\xef\x39\xe7\x3b\xe7\xfb\xee\x27\xc5\xde\x51\xdc\x2b\xe3\xc1\x09\x79\xfd\x9e\x34\xff\x0e\xfd\x60\xa3\x90\x99\xb9\xcb\x73\x73\x0a\xd2\x4a\x8a\x06\xe6\x8d\x3c\x5c\x81\x20\xbf\x50\x52\x55\x60\xdb\x2b\x25\x5d\x5f\xcf\x09\xe2\x7f\x71\x4f\x6e\x7c\xf9\x54\xe4\x39\x29\xc5\xb3\xe3\xd0\xaf\xe3\xa3\x16\x6e\xf7\x2e\xd3\xa9\x8a\x03\x0d\x74\x5b\x81\x3a\xc8\xe7\x04\x91\x42\x2f\x21\x44\x9e\xe3\xb9\x79\x05\xa2\x59\xcb\x32\xac\x45\x68\xda\x39\x41\x24\xb5\x6a\x38\x1c\x92\x67\x3b\x49\xd3\x4d\xca\x65\x5c\x09\x64\x59\x96\x45\x9e\x7b\x80\x94\x65\x1d\x7c\x6d\x9a\xfa\xfa\x02\xb0\x6d\x68\x20\x7a\xfb\xe5\x5b\xd2\xff\x05\x37\x76\xe7\xa1\xa5\xc0\xa8\xd9\x8f\xbd\x01\xd9\x3f\x8e\x5e\x3d\xbb\xb8\x73\x3e\xaa\xd1\x5f\x87\x65\xf2\xa6\x1b\xbb\xe3\xe8\xd4\x15\x79\x6e\xc6\x40\x2b\x50\xbb\x0d\x75\x30\xbb\xa6\x02\xd3\x61\x5c\xc9\xf3\x7a\x74\xea\x92\xfd\x4a\x38\xfc\x80\x47\x3f\x63\xdf\xa7\x57\x15\x84\x0c\x67\xc6\x40\x08\xa8\x4e\x2a\xf2\x51\x95\x1c\x1d\x46\x1d\x37\xd9\x1b\x93\xed\x6e\x5c\xe9\xa7\x87\x57\xca\xdd\x2f\xa1\x1f\xbe\xa7\xb0\x76\x80\x7f\xed\x85\x41\xf0\x10\x2c\xdf\x31\x8c\x55\xb2\xdd\x25\xcd\x0f\x78\x70\x82\x47\x65\xdc\xf0\x28\xf6\xac\x11\x77\x6a\x61\xb0\x4d\xd3\x8a\xfe\xf4\xf0\xce\xa1\xc8\x73\x77\x4b\x79\x0d\x50\xfc\x56\x3f\xf4\xcb\x64\xab\x9f\x06\x27\xb1\x2a\x62\xf7\x2c\x79\xe9\x16\x1c\xc7\xb4\x73\xd9\xec\x46\x41\x2e\x1a\x40\x83\x96\x2e\x1b\x96\x26\xab\x17\xfe\xe3\x9f\x9a\x51\x7f\x18\xb9\x9d\xa8\xb1\x89\x77\x5b\x3c\xf7\x10\xae\xc2\x39\x88\x56\xd3\xe4\x3f\x3a\x62\x5c\x54\xfb\x4a\x58\x2a\x7b\x07\xe8\xe6\x22\x58\x73\x72\x82\x18\x9e\x9e\x45\xcd\x5e\xec\xbd\x27\xad\xed\xd8\x1b\xe0\x6a\x1d\x8f\xcb\xc2\xa4\x14\xbb\x00\x0d\xb4\x6c\x38\xf2\xda\xfa\x46\x76\xc6\x28\x16\x15\x94\xcf\x0a\xe4\x4d\x37\x6a\xbf\x60\x06\x70\xbb\xf7\xe8\xda\xc2\x1f\x87\xfe\x11\xa9\x8e\xe9\xb0\x6c\x1d\x3f\xa2\x53\x62\x2a\x1a\x78\x8c\xf7\xde\x7d\x92\xf1\x78\x0f\x3f\xef\x92\x96\x87\x1b\xef\x58\x3f\x78\xee\x1b\xe0\x50\x7b\xdf\xa2\x15\x63\x62\x8f\x2a\x51\x5b\x9f\x92\x3e\xb9\xf1\xd5\xd3\xff\x27\xbc\x08\xfb\xa4\x43\xda\x55\x52\x1d\xe3\xad\xe3\xa4\xf3\x57\xf2\xdb\xc1\xf9\xa8\x16\x9e\x6e\x92\x96\xc7\x7e\x86\xc1\x66\x38\xec\x86\xfe\x8b\x68\xb8\x47\x7e\x6f\xf3\x9c\x34\x2d\x9a\xe7\xa4\xd8\x1b\xb0\xb8\x84\xa2\x96\x63\x04\xe4\x6d\x25\x39\x68\x09\x49\xa5\x4e\xf6\x8f\xa9\xb4\x77\xc0\x1a\x43\x2b\x5f\x00\x8a\xa5\x16\x68\x67\x3e\x53\x78\x09\xb1\x97\x36\x91\xa3\x26\xaf\x17\x64\xe6\xae\x6d\x42\x76\x62\x81\xe7\xa4\x2f\x92\x4a\x1d\xbb\xaf\x70\x63\x37\x35\x76\x8f\x1a\xcb\xdc\x9a\x9a\xbc\xc9\x73\x92\x9c\x7e\x53\x17\xf7\x41\x1e\x5a\x40\xa5\xc3\xb2\x84\xfe\x45\x90\xf6\x22\x73\x8b\x75\xe0\xe6\x12\x62\x65\x44\xaf\x5d\x3a\x43\x3b\x5e\x3a\x55\x74\x55\x90\x76\x35\xc7\x73\x12\x40\x99\x07\x0b\x3c\x27\xfd\xa8\x64\xbe\xbb\x37\x59\x3f\xd3\x7d\x33\x07\x6d\xaa\x70\x35\x9c\xe5\x91\x0a\x2c\x42\x47\x07\xb3\x45\xd3\xa1\xcb\x8d\x85\x11\xfa\x41\xf4\x47\x70\x3e\xaa\x5d\x3c\xe9\x49\x28\xff\x04\x00\x00\xff\xff\xa5\x00\xce\x48\x34\x05\x00\x00")

func resources_language_zh_cn_yml() ([]byte, error) {
	return bindata_read(
		_resources_language_zh_cn_yml,
		"resources/language/zh-CN.yml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resources/language/en-US.yml": resources_language_en_us_yml,
	"resources/language/ja-JP.yml": resources_language_ja_jp_yml,
	"resources/language/zh-CN.yml": resources_language_zh_cn_yml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resources/language/en-US.yml": &_bintree_t{resources_language_en_us_yml, map[string]*_bintree_t{
	}},
	"resources/language/ja-JP.yml": &_bintree_t{resources_language_ja_jp_yml, map[string]*_bintree_t{
	}},
	"resources/language/zh-CN.yml": &_bintree_t{resources_language_zh_cn_yml, map[string]*_bintree_t{
	}},
}}
